// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	entity "github.com/egor-denisov/wallet-infotecs/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockWallet is a mock of Wallet interface.
type MockWallet struct {
	ctrl     *gomock.Controller
	recorder *MockWalletMockRecorder
}

// MockWalletMockRecorder is the mock recorder for MockWallet.
type MockWalletMockRecorder struct {
	mock *MockWallet
}

// NewMockWallet creates a new mock instance.
func NewMockWallet(ctrl *gomock.Controller) *MockWallet {
	mock := &MockWallet{ctrl: ctrl}
	mock.recorder = &MockWalletMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWallet) EXPECT() *MockWalletMockRecorder {
	return m.recorder
}

// CreateNewWalletWithDefaultBalance mocks base method.
func (m *MockWallet) CreateNewWalletWithDefaultBalance(c context.Context) (*entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewWalletWithDefaultBalance", c)
	ret0, _ := ret[0].(*entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewWalletWithDefaultBalance indicates an expected call of CreateNewWalletWithDefaultBalance.
func (mr *MockWalletMockRecorder) CreateNewWalletWithDefaultBalance(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewWalletWithDefaultBalance", reflect.TypeOf((*MockWallet)(nil).CreateNewWalletWithDefaultBalance), c)
}

// GetWalletById mocks base method.
func (m *MockWallet) GetWalletById(c context.Context, walletId string) (*entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletById", c, walletId)
	ret0, _ := ret[0].(*entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletById indicates an expected call of GetWalletById.
func (mr *MockWalletMockRecorder) GetWalletById(c, walletId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletById", reflect.TypeOf((*MockWallet)(nil).GetWalletById), c, walletId)
}

// GetWalletHistoryById mocks base method.
func (m *MockWallet) GetWalletHistoryById(c context.Context, walletId string) ([]entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletHistoryById", c, walletId)
	ret0, _ := ret[0].([]entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletHistoryById indicates an expected call of GetWalletHistoryById.
func (mr *MockWalletMockRecorder) GetWalletHistoryById(c, walletId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletHistoryById", reflect.TypeOf((*MockWallet)(nil).GetWalletHistoryById), c, walletId)
}

// SendFunds mocks base method.
func (m *MockWallet) SendFunds(c context.Context, from, to string, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendFunds", c, from, to, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendFunds indicates an expected call of SendFunds.
func (mr *MockWalletMockRecorder) SendFunds(c, from, to, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFunds", reflect.TypeOf((*MockWallet)(nil).SendFunds), c, from, to, amount)
}

// MockWalletRepo is a mock of WalletRepo interface.
type MockWalletRepo struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepoMockRecorder
}

// MockWalletRepoMockRecorder is the mock recorder for MockWalletRepo.
type MockWalletRepoMockRecorder struct {
	mock *MockWalletRepo
}

// NewMockWalletRepo creates a new mock instance.
func NewMockWalletRepo(ctrl *gomock.Controller) *MockWalletRepo {
	mock := &MockWalletRepo{ctrl: ctrl}
	mock.recorder = &MockWalletRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletRepo) EXPECT() *MockWalletRepoMockRecorder {
	return m.recorder
}

// CreateNewWallet mocks base method.
func (m *MockWalletRepo) CreateNewWallet(с context.Context, wallet *entity.Wallet) (*entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewWallet", с, wallet)
	ret0, _ := ret[0].(*entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewWallet indicates an expected call of CreateNewWallet.
func (mr *MockWalletRepoMockRecorder) CreateNewWallet(с, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewWallet", reflect.TypeOf((*MockWalletRepo)(nil).CreateNewWallet), с, wallet)
}

// GetWalletById mocks base method.
func (m *MockWalletRepo) GetWalletById(c context.Context, walletId string) (*entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletById", c, walletId)
	ret0, _ := ret[0].(*entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletById indicates an expected call of GetWalletById.
func (mr *MockWalletRepoMockRecorder) GetWalletById(c, walletId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletById", reflect.TypeOf((*MockWalletRepo)(nil).GetWalletById), c, walletId)
}

// GetWalletHistoryById mocks base method.
func (m *MockWalletRepo) GetWalletHistoryById(c context.Context, walletId string) ([]entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletHistoryById", c, walletId)
	ret0, _ := ret[0].([]entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletHistoryById indicates an expected call of GetWalletHistoryById.
func (mr *MockWalletRepoMockRecorder) GetWalletHistoryById(c, walletId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletHistoryById", reflect.TypeOf((*MockWalletRepo)(nil).GetWalletHistoryById), c, walletId)
}

// SendFunds mocks base method.
func (m *MockWalletRepo) SendFunds(ctx context.Context, transaction *entity.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendFunds", ctx, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendFunds indicates an expected call of SendFunds.
func (mr *MockWalletRepoMockRecorder) SendFunds(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFunds", reflect.TypeOf((*MockWalletRepo)(nil).SendFunds), ctx, transaction)
}
